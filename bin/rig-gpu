#!/usr/bin/env node

const minimist = require('minimist');
const isNullOrUndefined = require("util").isNullOrUndefined;

const argv = minimist(process.argv.slice(2));

if (argv.h || !argv._[0] ||  isNullOrUndefined(argv.i) || isNaN(parseInt(argv.i)) || argv.g && isNaN(parseInt(argv.g)) ||
    argv.m && isNaN(parseInt(argv.m)) || argv.p && isNaN(parseInt(argv.p)) || argv.f && isNaN(parseInt(argv.f))) {
    console.log('\nrig-gpu HOSTNAME -i cardId [-a algorithm] [-g gpuClocksOffs] [-m memClocksOffs] [-p powerLimit] ' +
        '[-f fanSpeed]');
    console.log('\tcontrol GPU cardId on HOSTNAME\n');
    console.log('Supported commands:\t');
    console.log('\t-i card index, ex. 0');
    console.log('\t-a algorithm name, if omitted - for all algorithms ');
    console.log('\t-g gpu clock offset, ex. 110 or -200');
    console.log('\t-m mem clock offset, ex. 1100 or 0');
    console.log('\t-p power limit in watts, ex. 195');
    console.log('\t-f fan speed in percents, ex. 80');
    console.log('\n\n\tex. ./rig-gpu F503 -i 0 -g-200 -a ethash');
    process.exit(0);
}


const Client = require('../src/client').Client;
const client = new Client();
client.overclock(argv._[0], parseInt(argv.i), argv.a, argv.g, argv.m, argv.p, argv.f)
    .then(() => process.exit(0))
    .catch(err => {
        console.error(err);
        process.exit(1);
    });